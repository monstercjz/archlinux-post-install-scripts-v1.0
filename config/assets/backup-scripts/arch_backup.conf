# ~/.config/arch_backup.conf
# arch_backup.sh 脚本的配置文件

# === 基本设置 ===
# 备份文件存放的根目录。
# 请确保此目录存在并且有足够的磁盘空间。
CONF_BACKUP_ROOT_DIR="/mnt/backup/archlinux"

# 日志文件路径。
# 如果脚本以 root 身份运行: CONF_LOG_FILE="/var/log/arch_backup.log"
# 如果以普通用户身份运行，或用于用户特定的日志: CONF_LOG_FILE="${HOME}/.cache/arch_backup/arch_backup.log"
CONF_LOG_FILE="/var/log/arch_backup.log"

# 日志级别: DEBUG (调试), INFO (信息), WARN (警告), ERROR (错误)
CONF_LOG_LEVEL="DEBUG"

# ... (其他配置保持不变) ...

# === 用户特定备份设置 ===
# 如果希望备份特定用户的家目录 (而不是执行 sudo 的用户，或者当脚本由 root 的 cron 运行时)，
# 在这里指定用户名。如果留空，脚本将尝试确定原始 sudo 用户。
# 如果脚本以普通用户身份运行 (非 sudo)，则此设置无效，将备份当前用户。
CONF_TARGET_USERNAME="cjz" # 例如: "myuser", 或者留空 ""

# === 备份类别 ===
# 设置为 "true" 启用该类别的备份, "false" 则禁用。
CONF_BACKUP_SYSTEM_CONFIG="true"  # 系统配置文件
CONF_BACKUP_USER_DATA="true"      # 用户家目录数据
CONF_BACKUP_PACKAGES="true"       # 已安装软件包列表
CONF_BACKUP_LOGS="true"           # 系统日志
CONF_BACKUP_CUSTOM_PATHS="true"   # 用户自定义路径

# === 用户数据配置 ===
# 仅当 CONF_BACKUP_USER_DATA="true" 时生效
# 用户家目录下需要备份的项目列表 (空格分隔)。
# 路径相对于用户家目录。
CONF_USER_HOME_INCLUDE=(
    ".config"
    ".local/share"
    # ".ssh"
    # ".gnupg"
    ".bashrc"
    ".zsh_history"
    ".zshrc"
    # "Documents"
    # "Pictures"
    # "Videos" # 示例: 通常较大, 考虑排除
)

# 从用户家目录备份中排除的模式列表 (空格分隔)。
# 这些是 rsync 的排除模式。
CONF_USER_HOME_EXCLUDE=(
    "*/.cache/*"
    "*/Cache/*"
    "*/node_modules/*"
    "*/Trash/*"
    "*.tmp"
    "arch_backup.conf"
    "Downloads/*" # 通常是临时文件
)

# === 自定义路径配置 ===
# 仅当 CONF_BACKUP_CUSTOM_PATHS="true" 时生效
# 需要备份的绝对路径列表 (空格分隔)。
CONF_CUSTOM_PATHS_INCLUDE=(
    # "/opt/my_custom_app"
    # "/srv/http"
)
# 自定义路径的 rsync排除模式列表 (空格分隔)。
# 全局应用于所有自定义路径的包含项。
CONF_CUSTOM_PATHS_EXCLUDE=(
    "*/temp_files/*"
)

# === 系统日志配置 ===
# 仅当 CONF_BACKUP_LOGS="true" 时生效
# /var/log 下的关键日志文件/目录列表 (空格分隔)。
CONF_SYSTEM_LOG_FILES=(
    "pacman.log"
    "Xorg.0.log"
    # "journal" # journalctl 的输出通常更受青睐，并会单独捕获
)
# 是否捕获 journalctl 的输出?
CONF_BACKUP_JOURNALCTL="true"
# journalctl 的参数 (例如: --boot=-1 代表上次启动的日志)
CONF_JOURNALCTL_ARGS="" # 为空则代表当前启动的所有日志, 或例如: "--since yesterday"

# === 备份机制 ===
# 是否启用增量备份 (使用 rsync 的 --link-dest)。
# 如果为 false,每次备份都是完整复制 (消耗更多空间)。
CONF_INCREMENTAL_BACKUP="true"

# 是否为旧备份启用压缩。
CONF_COMPRESSION_ENABLE="true"
# 压缩方法: gzip, bzip2, xz
CONF_COMPRESSION_METHOD="xz"
# 压缩级别 (取决于压缩方法, 例如 gzip/xz 为 1-9, xz 默认为 6)
CONF_COMPRESSION_LEVEL="6"
# 压缩归档文件的扩展名
CONF_COMPRESSION_EXT="tar.xz" # 如果方法改变，这里也要改 (例如 .tar.gz)

# === 保留策略 ===
# 保留最近多少个 *未压缩* 的快照。
# 如果启用了增量备份，这些快照将用于 --link-dest。如果启用增量，则最少为1。
CONF_RETENTION_UNCOMPRESSED_COUNT="3"

# 如何清理 *已压缩* 的归档文件:
# 选项1: 保留特定数量的压缩归档。
CONF_RETENTION_COMPRESSED_COUNT="10" # 设置为 0 禁用基于数量的保留
# 选项2: 删除超过 X 天的压缩归档。
CONF_RETENTION_COMPRESSED_DAYS="90" # 设置为 0 禁用基于时间的保留
# 如果两者都设置，则更严格的那个（保留更少备份）可能会隐式应用，
# 或者脚本可以优先考虑一个（例如，先按时间，然后如果数量仍然超出，则删除最旧的以满足数量）。
# 我们设定优先级：首先按时间删除，然后如果数量仍然超出，则删除最旧的以满足数量限制。

# === 高级功能 ===
# 并行备份任务的数量。
# 如果 > 1, 需要 GNU Parallel。如果找不到 parallel 或值为 1, 则回退到串行执行。
CONF_PARALLEL_JOBS="2" # 设置为 1 表示串行执行。

# === 用户交互 ===
# 在执行有风险的操作前 (例如删除旧备份) 是否提示用户确认。
CONF_PROMPT_FOR_CONFIRMATION="false"

# 备份目标路径上要求的最小剩余磁盘空间百分比。
CONF_MIN_FREE_DISK_SPACE_PERCENT="10"